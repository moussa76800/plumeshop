public function addSingleBook(Request $request)
        {
            $request->validate([
                'isbn' => 'required',
                'prix' => 'required|numeric|min:0',
                'product_qty' => 'required|numeric|min:1',
                'category_id' => 'required',
                'subCategory_id' => 'required',
            ]);

            // Remplacez 'YOUR_API_KEY' par votre propre clé d'API Google Books
            $apiKey = 'AIzaSyBQC5zTGO2xVUl9a3a2WZ4hWuGdZeK1hqk';
            $isbn = str_replace([' ', '-'], '', $request->isbn);

            // Effectuez une requête à l'API Google Books pour récupérer les informations du livre
            $url = "https://www.googleapis.com/books/v1/volumes?q=isbn:{$isbn}&key={$apiKey}";
            $response = Http::get($url);
            $bookData = $response->json();

            // Vérifiez si les données du livre sont disponibles dans la réponse de l'API
            if (isset($bookData['items'][0]['volumeInfo'])) {
                $bookInfo = $bookData['items'][0]['volumeInfo'];

                // Récupérez les informations nécessaires de chaque livre
                $title = isset($bookInfo['title']) ? $bookInfo['title'] : '';
                $isbn = isset($bookInfo['industryIdentifiers'][0]['identifier']) ? $bookInfo['industryIdentifiers'][0]['identifier'] : '';
                $pageCount = isset($bookInfo['pageCount']) ? $bookInfo['pageCount'] : null;
                $publisherDate = isset($bookInfo['publishedDate']) ? $bookInfo['publishedDate'] : null;
                $imageLinks = isset($bookInfo['imageLinks']['thumbnail']) ? $bookInfo['imageLinks']['thumbnail'] : '';
                $language = isset($bookInfo['language']) ? $bookInfo['language'] : '';
                $description = isset($bookInfo['description']) ? $bookInfo['description'] : '';
                $longDescription = substr($description, 0, 255);

                // Vérifiez si toutes les informations nécessaires sont présentes
                if (empty($title) || empty($isbn) || $pageCount === null || $pageCount <= 0 || empty($imageLinks) || empty($language) || empty($description)) {
                    // Si certaines informations essentielles sont manquantes ou invalides, redirigez avec un message d'erreur
                    return view('backend.book.book_view')->with('error', 'Les informations du livre sont incomplètes ou invalides.');
                }

                // Vérifiez si le livre existe déjà dans la base de données en utilisant l'ISBN
                $existingBook = Book::where('isbn', $isbn)->first();

                if ($existingBook) {
                    // Le livre existe déjà dans la base de données, redirigez avec un message d'erreur
                    return view('backend.book.book_view')->with('error', 'Ce livre existe déjà dans la base de données.');
                }

                // Chercher l'éditeur dans la base de données en utilisant le nom du publisher de l'API
                $publisherName = isset($bookInfo['publisher']) ? $bookInfo['publisher'] : '';
                $publisher = Publisher::where('name', $publisherName)->first();

                if (!$publisher) {
                    // Si l'éditeur n'existe pas, l'insérer dans la base de données
                    $publisher = Publisher::create(['name' => $publisherName]);
                }
                $subCategory = SubCategory::find($request->subCategory_id);

                if (!$subCategory) {
                    // La sous-catégorie n'existe pas, redirigez avec un message d'erreur
                    return view('backend.book.book_view')->with('error', 'La sous-catégorie sélectionnée est invalide.');
                }

         
        // Enregistrez les informations du livre dans la base de données
        $book = Book::create([
            'title' => $title,
            'isbn' => $isbn,
            'num_pages' => $pageCount,
            'image' => $imageLinks,
            'price' => $request->prix, // Remplacez cette valeur par le prix réel du livre
            'datePublication' => $publisherDate,
            'langue' => $language,
            'product_code' => 'art' . mt_rand(10000000, 99999999),
            'product_qty' => $request->product_qty,
            'discount_price' => $request->discount_price, // Remplacez cette valeur par le prix de réduction réel du livre
            'special_offer' =>$request->special_offer,
            'featured' => $request->featured,
            'newBook'=>$request->newBook,
            'long_descp' => $longDescription,
            'categoryBook_id' =>  $request->category_id, 
            'subCategory_id' => $subCategory, 
            'publisher_id' => $publisher->id, 
        ]);

        // Associez les auteurs au livre si nécessaire
        if (isset($bookInfo['authors'])) {
            foreach ($bookInfo['authors'] as $authorName) {
                // Rechercher l'auteur par nom dans la base de données
                $author = Author::where('name', $authorName)->first();

                if (!$author) {
                    // Si l'auteur n'existe pas, l'insérer dans la base de données
                    $author = Author::create(['name' => $authorName]);
                }

                // Associer l'auteur au livre
                $book->authors()->attach($author->id);
            }
        }

        // Redirigez avec un message de succès
        return view('backend.book.book_view')->with('success', 'Le livre a été ajouté avec succès.');
    } else {
        // Si les données du livre ne sont pas disponibles dans la réponse de l'API, redirigez avec un message d'erreur
        return view('backend.book.book_view')->with('error', 'ISBN invalide ou livre introuvable dans l\'API Google Books.');
    }
}

            
            public function bookStore(Request $request)
            {
                $validatedData = $request->validate([
                    'isbn' => 'required',
                    'prix' => 'required|numeric|min:0',
                    'product_qty' => 'required|numeric|min:1',
                    'category_id' => 'required',
                    'subCategory_id' => 'required',
                ]);
            
                // Vérifier si la clé 'isbn' existe dans le tableau $validatedData
                if (isset($validatedData['isbn'])) {
                    $isbn = str_replace([' ', '-'], '', $validatedData['isbn']);
                } else {
                    // Gérer le cas où 'isbn' n'existe pas dans le tableau $validatedData
                    // Par exemple, rediriger avec un message d'erreur
                    return redirect()->back()->with('error', 'ISBN invalide.');
                }
            
                $categories = Category::all();
            
                foreach ($categories as $category) {
                    $subCategories = SubCategory::where('category_id', $category->id)->get();
            
                    foreach ($subCategories as $subCategory) {
                        // Remplacez 'YOUR_API_KEY' par votre propre clé d'API Google Books
                        $apiKey = 'AIzaSyBQC5zTGO2xVUl9a3a2WZ4hWuGdZeK1hqk';
            
                        // Effectuez une requête à l'API Google Books pour récupérer les livres de la sous-catégorie
                        $url = "https://www.googleapis.com/books/v1/volumes?q={$subCategory->name}&maxResults=30&key={$apiKey}";
                        $response = Http::get($url);
            
                        $bookData = $response->json();
            
                        if (isset($bookData['items'])) {
                            $booksAdded = 0; // Compteur de livres ajoutés pour cette sous-catégorie
                            foreach ($bookData['items'] as $item) {
                                if ($booksAdded >= 30) {
                                    break; // Limite de 30 livres atteinte, sortir de la boucle
                                }
            
                                // Vérifier si toutes les clés essentielles sont présentes dans les données renvoyées par l'API
                                if (!isset($item['volumeInfo']['title'], $item['volumeInfo']['industryIdentifiers'][0]['identifier'], $item['volumeInfo']['pageCount'], $item['volumeInfo']['publishedDate'], $item['volumeInfo']['imageLinks']['thumbnail'], $item['volumeInfo']['language'], $item['volumeInfo']['description'])) {
                                    // Si des clés essentielles sont manquantes, ignorer ce livre et passer au suivant
                                    continue;
                                }
            
                                // Récupérez les informations nécessaires de chaque livre
                                $bookInfo = $item['volumeInfo'];
                                $title = $bookInfo['title'];
                                $isbn = $bookInfo['industryIdentifiers'][0]['identifier'];
                                $pageCount = $bookInfo['pageCount'];
                                $publisherDate = $bookInfo['publishedDate'];
                                $imageLinks = $bookInfo['imageLinks']['thumbnail'];
                                $language = $bookInfo['language'];
                                $description = $bookInfo['description'];
                                $longDescription = substr($description, 0, 255);
            
                                // ... Le reste du code pour enregistrer le livre dans la base de données ...
            
                                $booksAdded++; // Incrémenter le compteur de livres ajoutés
                            }
                        }
                    }
                }
            
                return view('backend.book.book_view')->with('success', 'Les livres ont été ajoutés avec succès.');
            }
            

                public function addBooksAutomatically()
                {
                    $categories = Category::all();
                
                    foreach ($categories as $category) {
                        $subCategories = SubCategory::where('category_id', $category->id)->get();
                
                        foreach ($subCategories as $subCategory) {
                            // Remplacez 'YOUR_API_KEY' par votre propre clé d'API Google Books
                            $apiKey = 'AIzaSyBQC5zTGO2xVUl9a3a2WZ4hWuGdZeK1hqk';
                
                            // Effectuer une requête à l'API Google Books pour récupérer les livres de la sous-catégorie
                            $url = "https://www.googleapis.com/books/v1/volumes?q={$subCategory->name}&maxResults=30&key={$apiKey}";
                            $response = Http::get($url);
                
                            $bookData = $response->json();
                
                            if (isset($bookData['items'])) {
                                foreach ($bookData['items'] as $item) {
                                    // Récupérer les informations nécessaires de chaque livre
                                    $bookInfo = $item['volumeInfo'];
                                    $title = isset($bookInfo['title']) ? $bookInfo['title'] : '';
                                    $isbn = isset($bookInfo['industryIdentifiers'][0]['identifier']) ? $bookInfo['industryIdentifiers'][0]['identifier'] : '';
                                    $pageCount = isset($bookInfo['pageCount']) ? $bookInfo['pageCount'] : null;
                                    $publisherDate = isset($bookInfo['publishedDate']) ? $bookInfo['publishedDate'] : null;
                                    $imageLinks = isset($bookInfo['imageLinks']['thumbnail']) ? $bookInfo['imageLinks']['thumbnail'] : '';
                                    $language = isset($bookInfo['language']) ? $bookInfo['language'] : '';
                                    $description = isset($bookInfo['description']) ? $bookInfo['description'] : '';
                                    $longDescription = substr($description, 0, 255);
                
                                    // Vérifier si le livre existe déjà dans la base de données en utilisant l'ISBN
                                    $existingBook = Book::where('isbn', $isbn)->first();
                
                                    if (!$existingBook) {
                                        // Vérifier si les informations essentielles du livre sont présentes
                                        if (empty($title) || empty($imageLinks)||empty($publisherDate) || empty($isbn) || $pageCount === null || $pageCount <= 0) {
                                            // Si certaines informations essentielles sont manquantes ou invalides, passer au livre suivant
                                            continue;
                                        }
                                    
                
                                        // Chercher l'éditeur dans la base de données en utilisant le nom du publisher de l'API
                                        $publisherName = isset($bookInfo['publisher']) ? $bookInfo['publisher'] : '';
                                        $publisher = Publisher::where('name', $publisherName)->first();
                
                                        if (!$publisher) {
                                            // Si l'éditeur n'existe pas, l'insérer dans la base de données
                                            $publisher = Publisher::create(['name' => $publisherName]);
                                        }

                                        $productCode = 'art' . mt_rand(10000000, 99999999);
                                        $price = mt_rand(500, 2000) / 100;
                                        $specialOffer = rand(0, 1);
                                        $featured = rand(0, 1);
                                        $newBook = rand(0, 1);
                                        $discountPrice = rand(0, 1) ? mt_rand(1, 40) : null;
                                        if ($discountPrice !== null && $discountPrice >= $price) {
                                            $discountPrice = null;
                                        }
                                        $productQty = mt_rand(0, 5);
                                        $status = mt_rand(0, 1);

                                        // Enregistrez les informations du livre dans la base de données
                                        $book = Book::create([
                                            'title' => $title,
                                            'isbn' => $isbn,
                                            'num_pages' => $pageCount,
                                            'image' => $imageLinks,
                                            'price' => $price,
                                            'datePublication' => $publisherDate,
                                            'langue' => $language,
                                            'product_code' => $productCode,
                                            'product_qty' =>  $productQty,
                                            'discount_price' => $discountPrice,
                                            'special_offer' => $specialOffer,
                                            'featured' => $featured,
                                            'newBook' => $newBook,
                                            'long_descp' => $longDescription,
                                            'status'=>$status,
                                            'categoryBook_id' => $category->id,
                                            'subCategory_id' => $subCategory->id,
                                            'publisher_id' => $publisher->id, // Utilisez l'ID de l'éditeur existant ou nouvellement inséré
                                        ]);
                
                                        // Associez les auteurs au livre si nécessaire
                                        if (isset($bookInfo['authors'])) {
                                            foreach ($bookInfo['authors'] as $authorName) {
                                                // Rechercher l'auteur par nom dans la base de données
                                                $author = Author::where('name', $authorName)->first();
                
                                                if (!$author) {
                                                    // Si l'auteur n'existe pas, l'insérer dans la base de données
                                                    $author = Author::create(['name' => $authorName]);
                                                }
                
                                                // Associer l'auteur au livre
                                                $book->authors()->attach($author->id);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }




            <!--  ==============================================     START View and ADD to Mini-Cart   ====================================================== -->
 
 <script type="text/javascript">

function miniCart() {
$.ajax({
          type: 'GET',
          url: '/book/mini/cart',
          dataType:'json',
          success:function(response){
          //   <"pre">
          // console.log(response);
          //   <"/pre">
              $('span[id="cartSubTotal"]').text(response.cartTotal);
              $('#cartQty').text(response.cartQty);
              var miniCart = ""
              $.each(response.carts, function(key,value){
                  miniCart += `<div class="cart-item product-summary">
        <div class="row">
          <div class="col-xs-4">
            <div class="image"><a href="detail.html"><img src="${value.image}"></a></div>
          </div>
          <div class="col-xs-7">
            <h3 class="name"><a href="index.php?page-detail">${value.name}</a></h3>
            <div class="price"> ${value.price} * ${value.qty} </div>
          </div>
          <div class="col-xs-1 action"> 
          <button type="submit" id="${value.rowId}" onclick="miniCartRemove(this.id)"><i class="fa fa-trash"></i></button> </div>
        </div>
      </div>
      <!-- /.cart-item -->
      <div class="clearfix"></div>
      <hr>`
      });
              
              $('#miniCart').html(miniCart);
          }
      })
    }
miniCart();

 
 </script>

<!--  ==============================================     END View and ADD to Mini-Cart   ====================================================== -->

<!--  ==============================================     START DELETE Book to Mini-Cart   ====================================================== -->
<script type="text/javascript">

    function miniCartRemove(rowId){
      $.ajax({
          type: 'GET',
          url: '/minicart/removeBook/'+rowId,
          dataType:'json',
          success:function(data){
          miniCart();
           // Start Message 
              const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    icon: 'success',
                    showConfirmButton: false,
                    timer: 3000
                  })
              if ($.isEmptyObject(data.error)) {
                  Toast.fire({
                      type: 'success',
                      title: data.success
                  })
              }else{
                  Toast.fire({
                      type: 'error',
                      title: data.error
                  })
              }
              // End Message 
          }
      });
  }



</script>
<!--  ==============================================     START DELETE Book to Mini-Cart   ====================================================== -->

<!--  ==============================================     START ADD WISHLIST Book    ====================================================== -->
<script  type="text/javascript">

function addToWishList(book_id){
  $.ajax({
      type: "POST",
      dataType: 'json',
      url: '/addToWishList/'+book_id,
      success:function(data){
           // Start Message 
              const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    
                    showConfirmButton: false,
                    timer: 3000
                  })
              if ($.isEmptyObject(data.error)) {
                  Toast.fire({
                      type: 'success',
                      icon: 'success',
                      title: data.success
                  })
              }else{
                  Toast.fire({
                      type: 'error',
                      icon: 'error',
                      title: data.error
                  })
                  }
              // End Message 
      }
  })
} 
</script>
<!--  ==============================================     END  ADD WISHLIST Book    ====================================================== -->
<!--  ==============================================     lOAD WISHLIST Book    ====================================================== -->

<script type="text/javascript">
function wishList() {
    $.ajax({
        type: 'GET',
        url: '/user/getWishList',
        dataType: 'json',
        success: function(response) {
         
          var rows = "";
              $.each(response, function(key,value){
                  rows += `<tr>
                  <td class="col-md-2"><img src="/${value.book.image} " alt="image"></td>
                  <td class="col-md-7">
                      <div class="product-name"><a href="#">${value.book.title}</a></div>
                       
                      <div class="price">
                      ${value.book.discount_price == null
                          ? `${value.book.price}`
                          :
                          `${value.book.discount_price} <span>${value.book.price}</span>`
                      }

                          
                      </div>
                  </td>
      <td class="col-md-2">
          <button class="btn btn-primary icon" type="button" title="Add Cart" data-toggle="modal" data-target="#exampleModal" id="${value.book_id}" onclick="bookView(this.id)"> Add to Cart </button>
      </td>
      <td class="col-md-1 close-btn">
          <button type="submit" class="" id="${value.id}" onclick="wishListRemove(this.id)"><i class="fa fa-times"></i></button>
      </td>
              </tr>`
      });
              
              $('#wishlist').html(rows);
          }
      })

   }
wishlist();

</script>

 <!--  ==============================================     END  LOAD WISHLIST Book    ====================================================== -->
<!--  ==============================================     START DELETE Book to WishList   ====================================================== -->
<script type="text/javascript">

function wishListRemove(id){
  $.ajax({
      type: 'GET',
      url: '/user/removeWishList/'+id,
      dataType:'json',
      success:function(data){
      wishList();
       // Start Message 
          const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000
              })
          if ($.isEmptyObject(data.error)) {
              Toast.fire({
                  type: 'success',
                  icon: 'success',
                  title: data.success
              })
          }else{
              Toast.fire({
                  type: 'error',
                  icon: 'error',
                  title: data.error
              })
          }
          // End Message 
      }
  });
}
</script>
<!--  ==============================================     START DELETE Book to WishList   ====================================================== -->